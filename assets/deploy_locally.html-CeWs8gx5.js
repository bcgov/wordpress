import{_ as a,r as i,o as l,c as r,a as e,b as s,d as n,e as o}from"./app-CJU2Ihug.js";const c="/wordpress/assets/keychainSnippet-BteyvW7O.png",d="/wordpress/assets/wordpressInitialSetup-B9B3SLOL.png",p="/wordpress/images/max-upload-file-size.png",u={},h=o(`<h1 id="deploying-wordpress-to-docker" tabindex="-1"><a class="header-anchor" href="#deploying-wordpress-to-docker"><span>Deploying WordPress to Docker</span></a></h1><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>Setup</span></a></h2><p>Clone this repository, and go to the dev directory</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Clone WordPress deployment repository</span>
<span class="token function">git</span> clone https://github.com/bcgov/wordpress.git
<span class="token comment"># Change directory to the wordpress/dev folder</span>
<span class="token builtin class-name">cd</span> wordpress/dev
<span class="token comment"># Create an .env by copying the sample .env</span>
<span class="token function">cp</span> sample-env .env
</code></pre></div>`,4),m={class:"custom-container tip"},g=e("p",{class:"custom-container-title"},"TIP",-1),f={href:"https://github.com/bcgov/wordpress",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"git pull origin main",-1),k=o('<h2 id="environment-basics" tabindex="-1"><a class="header-anchor" href="#environment-basics"><span>Environment Basics</span></a></h2><ul><li>Update variables inside <code>.env</code> file to reflect your setup. <ul><li>The <code>CONTENT_DIR</code> variable is the location of your WordPress content directory.</li><li>The <code>TEMP_DIR</code> variable can be used to import/export db using the wp-cli command.</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When Importing and Exporting databases with the <code>wp cli</code> This will be the link between the WordPress container and your local machine.</p></div><div class="custom-container warning"><p class="custom-container-title">Optional: Switching to Rancher Desktop</p><p>If you are using Docker Desktop, you can switch to Rancher Desktop. This is not required, but it is recommended for a more stable experience. Rancher Desktop is a free and open-source desktop application that is designed to be lightweight and easy to use.</p><p>If you want to use Rancher Desktop:</p><ul><li>Uninstall Docker Desktop</li><li>Install and start Rancher Desktop: https://rancherdesktop.io/</li><li>Don&#39;t enable Kubernetes</li><li>run <code>wp_start</code> (might have to do this 2x and it should create a network)</li><li><code>wp db import /tmp/WordPress/all-sites-2025-04-03.sql</code> (or whatever the name of your file is) your site should now be back to normal.</li></ul></div><h2 id="setting-up-ssl-on-mac-required" tabindex="-1"><a class="header-anchor" href="#setting-up-ssl-on-mac-required"><span>Setting up SSL on Mac (required)</span></a></h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Make sure you are in the folder: <strong><code>{local repo location}/dev</code></strong> before you run the command below.</p></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># sets up `localhost` self signed certs.</span>\n<span class="token function">docker</span> compose <span class="token parameter variable">--file</span> docker-compose-init.yaml run self-signed-certificate-generator\n</code></pre></div>',7),w=e("strong",null,[e("code",null,"{local repo location}/dev/certs/nginx/ssl/localhost.crt")],-1),y={href:"https://support.apple.com/en-ca/guide/keychain-access/kyca2431/mac",target:"_blank",rel:"noopener noreferrer"},v=e("ul",null,[e("li",null,"Double-click the certificate."),e("li",null,[s('Next to Trust, click the arrow and in the dropdown box for "When using this certificate:" select '),e("code",null,"Always Trust"),s(".")])],-1),_=o('<p><img src="'+c+`" alt="keychainSnippet"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If this cert is not working, try refreshing the Keychain or verifying the certificate installation before considering a Mac restart as a last resort.</p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>WordPress will now run on localhost port 443, which is exactly the same port that Kubernetes runs on. Therefore, local Kubernetes and WordPress can&#39;t be running at the same time.</p></div><h2 id="run-docker-compose" tabindex="-1"><a class="header-anchor" href="#run-docker-compose"><span>Run Docker compose</span></a></h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You have to be in the wordpress/dev directory for this to work</p></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Starts WordPress deployment</span>
<span class="token function">docker</span> compose up
<span class="token comment"># to re-build the images and start WordPress deployment</span>
<span class="token comment"># The build flag is required, anytime there are changes to the images.</span>
<span class="token function">docker</span> compose up <span class="token parameter variable">--build</span>
<span class="token comment"># If you enable build in shell scripts, this scripts works from anywhere</span>
<span class="token comment"># Starts WordPress deployments</span>
wp_start
</code></pre></div><ul><li>ensure that the wp-cli container backs up the latest WP Database</li><li>You should see the following in the terminal:</li></ul><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>.
wp-cli-1 <span class="token operator">|</span> *** Backing up Database <span class="token keyword">in</span> <span class="token keyword">case</span> of disaster ***
wp-cli-1 <span class="token operator">|</span> Success: Exported to <span class="token string">&#39;/tmp/WordPress/all-sites-&lt;yyyy-mm-dd&gt;.sql&#39;</span><span class="token builtin class-name">.</span>
<span class="token comment"># (This should be accessible to ~/tmp/WordPress)</span>
<span class="token punctuation">..</span>.
</code></pre></div>`,8),x={href:"https://localhost",target:"_blank",rel:"noopener noreferrer"},W={href:"http://localhost:8081",target:"_blank",rel:"noopener noreferrer"},P=o('<p>When you access Wordpress local for the first time, you will be prompted with the initial setup. You can use this screenshot for reference for what to enter.</p><p><img src="'+d+'" alt="wordpressInitialSetup"></p><p>Once you have filled out all required inputs, click &quot;Install WordPress&quot;</p><h2 id="recommended-multi-site-configuration" tabindex="-1"><a class="header-anchor" href="#recommended-multi-site-configuration"><span>Recommended multi-site configuration</span></a></h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>WordPress (WP) multi-site is a configuration that enables multiple websites on the same WP installation.</p></div><ul><li><p>In the WordPress admin UI, go to menu Tools -&gt; Network Setup and click install</p></li><li><p>Bring down the WordPress site <code>docker compose down</code> (or &lt;CTRL&gt;-C if docker is in the foreground and then <code>docker compose down</code>).</p></li><li><p>In your <code>.env</code> file, ensure</p><ul><li><code>MULTISITE=1</code></li></ul></li><li><p>Bring up WordPress site <code>docker compose up</code></p></li><li><p>In the WordPress admin UI, go to My Sites -&gt; Network Admin -&gt; Settings and <code>change Max upload file size</code> to 10000 and click <code>Save Changes</code></p></li></ul><img src="'+p+`" style="max-width:250px;margin:1rem 0;"><ul><li>The WordPress wp-content directory can be found at the path specified in your <code>.env</code> file under the <code>CONTENT_DIR</code> variable.</li></ul><h2 id="running-thereafter" tabindex="-1"><a class="header-anchor" href="#running-thereafter"><span>Running Thereafter</span></a></h2><ul><li><p><code>docker compose up</code> runs the nginx, db, WordPress php-fpm, and wp-cli containers, this will also output debug.log in the stdout.</p></li><li><p>WordPress wp-content directory, can be found at the path specified in your <code>.env</code> under variable <code>CONTENT_DIR</code>, .</p></li></ul><h2 id="helper-functions" tabindex="-1"><a class="header-anchor" href="#helper-functions"><span>Helper functions</span></a></h2><p>The <a href="./bin/commands.sh">Helper functions</a> can be linked to run anytime a new terminal window is open by adding it to your <code>~/.bash_profile</code></p><h3 id="including-helper-functions-in-bash-profile" tabindex="-1"><a class="header-anchor" href="#including-helper-functions-in-bash-profile"><span>Including helper functions in bash profile</span></a></h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>In order to make the helper functions accessible you need to include them into your bash or zsh profile. These commands then can be run from anywhere on your file system from a terminal window.</p></div><p>If you are using bash, add this to your <code>~/.bash_profile</code>. If you are using Zsh, add this to your <code>~/.zshrc</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /location-of-this-repo/wordpress/dev/bin/commands.sh <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
 <span class="token builtin class-name">.</span> /location-of-this-repo/wordpress/dev/bin/commands.sh
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once this is done you can use the following commands from any directory</p>`,17),I=o("<li><code>wp_start</code> - Starts WordPress local deployment (docker)</li><li><code>wp_stop</code> - Stops WordPress local deployment (docker)</li><li><code>wp_log</code> - Tails the debug.log in the content directory</li><li><code>gowp</code> - Goes to plugin directory</li><li><code>gowp themes</code> - Goes to themes directory</li><li><code>wp_setup_tests</code> - Sets up WordPress unit testing environment. See the Unit tests section below for instructions.</li><li><code>wp_test</code> - Runs unit tests from the current directory.</li><li><code>wpgrep</code> - Does a grep with certain excludes to directories like .git, node_modules, vendor</li><li><code>wp_composer</code> - Runs the latest php composer</li>",9),T=e("code",null,"wp",-1),S={href:"https://wp-cli.org/",target:"_blank",rel:"noopener noreferrer"},R={id:"example-wordpress-command-line-using-wp",tabindex:"-1"},D={class:"header-anchor",href:"#example-wordpress-command-line-using-wp"},N={href:"https://developer.wordpress.org/cli/commands/",target:"_blank",rel:"noopener noreferrer"},q=o(`<ul><li><code>wp site list</code> - Shows all the sites.</li><li><code>wp plugin list</code> - gets all the plugins.</li><li><code>wp plugin update akismet</code> - updates akismet plugin</li></ul><h2 id="backing-up-full-database" tabindex="-1"><a class="header-anchor" href="#backing-up-full-database"><span>Backing up full database</span></a></h2><p>This file will get stored in a directory that you determined in your <code>.env</code> as the <code>TEMP_DIR</code> variable.</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># In order for this command to work you need the following in your terminal profile (bash or zsh)</span>
<span class="token comment"># . /location-of-this-repo/wordpress/dev/bin/commands.sh as shown above</span>
wp db <span class="token builtin class-name">export</span> /tmp/WordPress/all-sites.sql --add-drop-table
</code></pre></div><h2 id="restoring-full-database" tabindex="-1"><a class="header-anchor" href="#restoring-full-database"><span>Restoring full database</span></a></h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This command will replace your entire database, before running <code>wp db import</code> make sure you understand what this command does.</p></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>wp db <span class="token function">import</span> /tmp/WordPress/all-sites.sql
</code></pre></div><h2 id="unit-tests" tabindex="-1"><a class="header-anchor" href="#unit-tests"><span>Unit tests</span></a></h2>`,8),C=e("code",null,"wp-cli",-1),E={href:"https://developer.wordpress.org/cli/commands/scaffold/plugin-tests/",target:"_blank",rel:"noopener noreferrer"},B=o('<p>The WordPress Docker instance must be up and running to use the <code>wp_setup_tests</code> or <code>wp_test</code> commands (run <code>wp_start</code> to start the Docker instance).</p><h3 id="testing-setup" tabindex="-1"><a class="header-anchor" href="#testing-setup"><span>Testing Setup</span></a></h3><p>To set up the WP testing environment inside the WordPress container, run the command <code>wp_setup_tests</code> from anywhere.</p><p>If you get an error saying <code>command not found: wp_setup_tests</code>, follow the steps in the &quot;Helper functions&quot; section above.</p><h3 id="running-tests" tabindex="-1"><a class="header-anchor" href="#running-tests"><span>Running tests</span></a></h3><ol><li>Navigate to the plugin you want to execute tests on: <code>cd /path/to/your/plugin-directory</code></li><li>Run <code>wp_test</code>. <ul><li>If you get a message saying &quot;No tests executed&quot; the plugin is most likely not configured using the <code>wp scaffold plugin-tests</code> command so its tests cannot be executed this way. Run the unit tests locally instead (<code>composer run test</code>).</li><li>If you get a message saying &quot;Have you run bin/install-wp-tests.sh?&quot; you will need to run the <code>wp_setup_tests</code> command, then try again.</li></ul></li></ol>',6);function L(M,O){const t=i("ExternalLinkIcon");return l(),r("div",null,[h,e("div",m,[g,e("p",null,[s("you should be using "),e("a",f,[s("https://github.com/bcgov/wordpress"),n(t)]),s(" as your local WordPress development. ensure you pull the latest: "),b,s(" before you start working on your local WordPress development.")])]),k,e("ul",null,[e("li",null,[e("p",null,[s("Drag the cert located in "),w,s(" to "),e("a",y,[s("KeyChain app"),n(t)]),s(" section and trust always:")]),v])]),_,e("ul",null,[e("li",null,[s("Access Wordpress at "),e("a",x,[s("https://localhost"),n(t)])]),e("li",null,[s("Access PHPMyAdmin at "),e("a",W,[s("http://localhost:8081"),n(t)]),s(" (Note: does not use https)")])]),P,e("ul",null,[I,e("li",null,[T,s(" - "),e("a",S,[s("Wordpress Command line"),n(t)]),s(" that allows an endless amount of things to be completed with your local WordPress instance.")])]),e("h2",R,[e("a",D,[e("span",null,[s("Example "),e("a",N,[s("WordPress Command Line"),n(t)]),s(" using wp.")])])]),q,e("p",null,[C,s(" provides "),e("a",E,[s("a way to set up and perform unit/integration tests"),n(t)]),s(" in WordPress' official testing environment. If a plugin has been configured to use this method of unit testing, we can run those tests inside this docker deployment.")]),B])}const U=a(u,[["render",L],["__file","deploy_locally.html.vue"]]),G=JSON.parse(`{"path":"/guide/GettingStarted/deploy_locally.html","title":"Local development with WordPress","lang":"en-US","frontmatter":{"title":"Local development with WordPress","description":"Setup process for local development of Wordpress using Docker."},"headers":[{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"Environment Basics","slug":"environment-basics","link":"#environment-basics","children":[]},{"level":2,"title":"Setting up SSL on Mac (required)","slug":"setting-up-ssl-on-mac-required","link":"#setting-up-ssl-on-mac-required","children":[]},{"level":2,"title":"Run Docker compose","slug":"run-docker-compose","link":"#run-docker-compose","children":[]},{"level":2,"title":"Recommended multi-site configuration","slug":"recommended-multi-site-configuration","link":"#recommended-multi-site-configuration","children":[]},{"level":2,"title":"Running Thereafter","slug":"running-thereafter","link":"#running-thereafter","children":[]},{"level":2,"title":"Helper functions","slug":"helper-functions","link":"#helper-functions","children":[{"level":3,"title":"Including helper functions in bash profile","slug":"including-helper-functions-in-bash-profile","link":"#including-helper-functions-in-bash-profile","children":[]}]},{"level":2,"title":"Example WordPress Command Line using wp.","slug":"example-wordpress-command-line-using-wp","link":"#example-wordpress-command-line-using-wp","children":[]},{"level":2,"title":"Backing up full database","slug":"backing-up-full-database","link":"#backing-up-full-database","children":[]},{"level":2,"title":"Restoring full database","slug":"restoring-full-database","link":"#restoring-full-database","children":[]},{"level":2,"title":"Unit tests","slug":"unit-tests","link":"#unit-tests","children":[{"level":3,"title":"Testing Setup","slug":"testing-setup","link":"#testing-setup","children":[]},{"level":3,"title":"Running tests","slug":"running-tests","link":"#running-tests","children":[]}]}],"git":{"contributors":[{"name":"Richard O'Brien","email":"122112933+robrien-bcgov@users.noreply.github.com","commits":1}]},"filePathRelative":"guide/GettingStarted/deploy_locally.md"}`);export{U as comp,G as data};
